PASSING_TONE: >-
    pitches if (pitches :=
        [pitch for pitch in range(prev_pitch + 1, next_pitch) if pitch % 12 in scale]
        if prev_pitch < next_pitch else
        [pitch for pitch in range(prev_pitch - 1, next_pitch, -1) if pitch % 12 in scale]
    )
    and (test_pitches := [prev_pitch, *pitches, next_pitch])
    and all(abs(test_pitches[i] - test_pitches[i - 1]) <= 2 for i in range(1, len(test_pitches)))
    else None
UPPER_NEIGHBOR_TONE: >-
    pitch if (pitch :=
        next(prev_pitch + x for x in range(1, 12) if (prev_pitch + x) % 12 in scale)
    ) and pitch - prev_pitch <= 2
    else None
    if prev_pitch == next_pitch
    else None
LOWER_NEIGHBOR_TONE: >-
    pitch if (pitch :=
        next(prev_pitch - x for x in range(1, 12) if (prev_pitch - x) % 12 in scale)
    ) and prev_pitch - pitch <= 2
    else None
    if prev_pitch == next_pitch
    else None
APPOGIATURA: >-
    pitch if (pitch :=
        next(next_pitch + x for x in range(1, 12) if (next_pitch + x) % 12 in scale)
        if prev_pitch < next_pitch else
        next(next_pitch - x for x in range(1, 12) if (next_pitch - x) % 12 in scale)
    ) and abs(pitch - next_pitch) <= 2
    else None
    if prev_pitch != next_pitch
    else None
ESCAPE_TONE: >-
    pitch if (pitch :=
        next(prev_pitch - x for x in range(1, 12) if (prev_pitch - x) % 12 in scale)
        if prev_pitch < next_pitch else
        next(prev_pitch + x for x in range(1, 12) if (prev_pitch + x) % 12 in scale)
    ) and abs(pitch - prev_pitch) <= 2
    else None
    if prev_pitch != next_pitch
    else None
SUSPENSION: >-
    prev_pitch 
    if prev_pitch % 12 in scale 
    else None
ANTICIPATION: >-
    next_pitch 
    if next_pitch % 12 in scale 
    else None
TEST_ALIAS: >-
    sin( x / pi * 8 ) + x % 8
